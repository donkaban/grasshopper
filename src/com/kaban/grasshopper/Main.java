package com.kaban.grasshopper;import javax.microedition.khronos.egl.EGLConfig;import javax.microedition.khronos.opengles.GL10;import android.content.res.AssetManager;import android.content.Context;import android.app.Activity;import android.content.pm.ActivityInfo;import android.opengl.GLSurfaceView;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.view.MotionEvent;import android.view.Window;import android.widget.TextView;class engine{    static {System.loadLibrary("grasshopper");}      public native static void init(AssetManager mgr);    public native static void draw();    public native static void resize(int w, int h);    public native static boolean onTouch(int x, int y);    public native static boolean onRelease(int x, int y);    public native static boolean onMove(int x, int y);}class Renderer implements GLSurfaceView.Renderer{    private AssetManager _manager;    public Renderer(Context context)    {        super();        _manager = context.getAssets();    }    @Override public void onDrawFrame(GL10 _nu) {engine.draw();}    @Override public void onSurfaceCreated(GL10 _nu, EGLConfig c)  {engine.init(_manager);}    @Override public void onSurfaceChanged(GL10 _nu, int w, int h) {engine.resize(w, h);}}public class Main extends Activity{    private GLSurfaceView   _surface;    private static TextView _label;    private static Handler  _hdl;    @Override public void onCreate(Bundle savedState)    {        super.onCreate(savedState);        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);        requestWindowFeature(Window.FEATURE_NO_TITLE);        setContentView(R.layout.main);        _surface = (GLSurfaceView) findViewById(R.id.glview);        _label = (TextView) findViewById(R.id.label);        _surface.setEGLContextClientVersion(2);        _surface.setEGLConfigChooser(true);        _surface.setRenderer(new Renderer(this));        _hdl = new Handler()        {            @Override public void handleMessage(Message msg)            {                String text = (String)msg.obj;                _label.setText(text);            }        };    }    @Override public boolean onTouchEvent(MotionEvent event)    {        int x = (int) event.getX();        int y = (int) event.getY();        switch (event.getAction()) {            case MotionEvent.ACTION_DOWN:                return engine.onTouch(x,y);            case MotionEvent.ACTION_CANCEL:            case MotionEvent.ACTION_UP:                return engine.onRelease(x,y);            case MotionEvent.ACTION_MOVE:                return engine.onMove(x,y);            default:                return super.onTouchEvent(event);        }    }    public static void print(String text)    {        Message msg = new Message();        msg.obj = text;        _hdl.sendMessage(msg);    }}